from playwright.sync_api import sync_playwright
import time

def test_validacion_email_espacios():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()
        page.set_viewport_size({"width": 1280, "height": 800})

        try:
            # Configuraci√≥n inicial autom√°tica
            page.goto("https://www.ucp.edu.ar/ingreso2025/", timeout=15000)
            page.select_option("select", index=9)  # Carrera (Ing. Sistemas)
            page.click("text=Posadas")  # Sede
            time.sleep(1)

            # Locators
            nombre = page.locator("input[placeholder='Nombre y Apellido']")
            email = page.locator("input[placeholder='Correo electr√≥nico']")
            telefono = page.locator("input[placeholder='Telefono']")
            continuar_btn = page.locator("input.form_button[value='CONTINUAR']")

            print("\nüîç PROGRAMA 1: Validaci√≥n de email y campos vac√≠os")
            print("--------------------------------------------------")

            # --- TEST 1: Espacio vac√≠o ---
            print("\nüîç Test 1: Validaci√≥n de campos vac√≠os")
            continuar_btn.click()
            
            # Verificar estilos de error (cambian a fondo rojo seg√∫n el JS)
            nombre_color = nombre.evaluate("el => window.getComputedStyle(el).backgroundColor")
            email_color = email.evaluate("el => window.getComputedStyle(el).backgroundColor")
            telefono_color = telefono.evaluate("el => window.getComputedStyle(el).backgroundColor")
            
            assert "rgb(255, 152, 179)" in nombre_color.lower(), "‚ùå Fall√≥ validaci√≥n nombre vac√≠o"
            assert "rgb(255, 152, 179)" in email_color.lower(), "‚ùå Fall√≥ validaci√≥n email vac√≠o"
            assert "rgb(255, 152, 179)" in telefono_color.lower(), "‚ùå Fall√≥ validaci√≥n tel√©fono vac√≠o"
            print("‚úÖ Campos vac√≠os detectados correctamente")
            time.sleep(1.5)

            # --- TEST 2: Email inv√°lido ---
            print("\n‚ö†Ô∏è Caso 2: Email mal formado (nombre y tel√©fono V√ÅLIDOS)")
            nombre.fill("Mar√≠a Gonz√°lez")  # Nombre gen√©rico v√°lido
            email.fill("esto-no-es-un-email")  # Email inv√°lido
            telefono.fill("1122334455")  # Tel√©fono gen√©rico v√°lido (10 d√≠gitos)
            
            input("üëâ PRESIONA ENTER para hacer clic MANUAL en 'CONTINUAR' y verificar validaci√≥n...")
            
            # Verificaci√≥n espec√≠fica del email
            email_color = email.evaluate("el => window.getComputedStyle(el).backgroundColor")
            nombre_color = nombre.evaluate("el => window.getComputedStyle(el).backgroundColor")  # Para asegurar que no hay error en nombre
            telefono_color = telefono.evaluate("el => window.getComputedStyle(el).backgroundColor")  # Para asegurar que no hay error en tel√©fono

            if "rgb(255, 152, 179)" in email_color.lower():
                print("‚úÖ Correcto: Solo el email inv√°lido muestra error (fondo rojo)")
                # Verificar que los otros campos NO tienen error
                if "rgb(255, 152, 179)" not in nombre_color.lower() and "rgb(255, 152, 179)" not in telefono_color.lower():
                    print("‚úÖ Nombre y tel√©fono se mantienen v√°lidos")
                else:
                    print("‚ö†Ô∏è Advertencia: Campos v√°lidos aparecen como err√≥neos")
            else:
                print("‚ùå Error: El sistema acept√≥ un email inv√°lido")
            time.sleep(1.5)
            continuar_btn.click()

        except Exception as e:
            print(f"\n‚ö†Ô∏è Error inesperado: {str(e)}")
            page.screenshot(path="error_email.png")
        finally:
            input("\nPresiona ENTER para cerrar el navegador...")
            browser.close()

if __name__ == "__main__":
    test_validacion_email_espacios()